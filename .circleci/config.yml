version: 2

defaults:
  # This makes use of YAML's anchors and aliases in order to reduce duplication. For details on the `&`, `*` and `<<`
  # operators refer to https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
  environment: &environment
    DSS_ES_TIMEOUT: 30
    DSS_UNITTEST_OPTS: -v
  after_checkout: &after_checkout |
    git submodule sync
    git submodule update --init
    # Each `run` step is invoked in a separate shell
    echo "source $CIRCLE_WORKING_DIRECTORY/environment" >> $BASH_ENV
  after_test: &after_test |
    bash <(curl -s https://codecov.io/bash)
  test_job: &test_job
    environment: *environment
    docker:
      - image: $DOCKER_REPO:$CIRCLE_BRANCH

jobs:
  build_image:
    environment: *environment
    docker:
      - image: circleci/python:3.6-jessie
    steps:
      - setup_remote_docker
      - checkout
      - run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          image_commit=$(scripts/list_docker_tags.sh $DOCKER_REPO $CIRCLE_BRANCH)
          if [ -z "$image_commit" ]; then
            diff=yes
          else
            diff=$(git diff --name-only $image_commit $CIRCLE_SHA1 -- Dockerfile requirements-dev.txt || echo yes)
          fi
          if [ -n "$diff" ]; then
            docker build -f Dockerfile.build -t $DOCKER_REPO:$CIRCLE_BRANCH .
            docker tag $DOCKER_REPO:$CIRCLE_BRANCH $DOCKER_REPO:$CIRCLE_SHA1
            docker push $DOCKER_REPO:$CIRCLE_BRANCH
            docker push $DOCKER_REPO:$CIRCLE_SHA1
          fi
  test_parallel:
    <<: *test_job
    steps:
      - checkout
      - run: *after_checkout
      - run: make -j4 parallel_test
      - run: *after_test
  test_search_and_subscriptions:
    <<: *test_job
    steps:
      - checkout
      - run: *after_checkout
      - run: make -j1 tests/test_search.py tests/test_subscriptions.py
      - run: *after_test
  test_aws_indexer:
    <<: *test_job
    steps:
      - checkout
      - run: *after_checkout
      - run: DSS_UNITTEST_OPTS="$DSS_UNITTEST_OPTS TestAWSIndexer" make -j1 tests/test_indexer.py
      - run: *after_test
  test_gcp_indexer:
    <<: *test_job
    steps:
      - checkout
      - run: *after_checkout
      - run: DSS_UNITTEST_OPTS="$DSS_UNITTEST_OPTS TestGCPIndexer" make -j1 tests/test_indexer.py
      - run: *after_test

workflows:
  version: 2
  test:
    jobs:
      - build_image
      - test_parallel:
          requires:
            - build_image
      - test_search_and_subscriptions:
          requires:
            - build_image
      - test_aws_indexer:
          requires:
            - build_image
      - test_gcp_indexer:
          requires:
            - build_image
